@using System.Globalization
@model PaginatedList<OperationViewModel>
@{
    ViewData["Title"] = "Operations";
    int i = 0;
}

@*<input class="form-control my-2" type="text" id="search" placeholder="Search" />*@

<div class="container row">
    <div class="col-8">
        <form asp-action="Operations" method="get">
            <div class="form-row my-2">
                <div class="form-col mx-2">
                    <select id="itemSelect" class="form-control" name="itemNameFilter" multiple>
                        @foreach (var item in ViewData["AllItems"] as List<ItemViewModel>)
                        {
                            @if ((ViewData["ItemNameFilter"] as string[]).Contains(item.Name))
                            {
                                <option value="@item.Name" selected>@item.Name</option>
                            }
                            else
                            {
                                <option value="@item.Name">@item.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-col mr-2">
                    <select id="catSelect" class="form-control" name="catFilter" multiple>
                        @foreach (var cat in ViewData["AllCats"] as List<CategoryViewModel>)
                        {
                            @if ((ViewData["CatFilter"] as string[]).Contains(cat.Name))
                            {
                                <option value="@cat.Name" selected>@cat.Name</option>
                            }
                            else
                            {
                                <option value="@cat.Name">@cat.Name</option>
                            }
                        }
                    </select>
                </div>

                <div class="form-col mr-2">
                    <input id="pageSize" class="form-control" type="number" name="pageSize" placeholder="Page Size" min="5" value="@Model.PageSize"/>
                </div>
            </div>

            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="buyUsr" class="form-control" type="text" name="buyUsrNameFilter" placeholder="Buying User Name" value="@ViewData["BuyUserFilter"]"/>
                </div>

                <div class="form-col mr-2">
                    <input id="sellUsr" class="form-control" type="text" name="sellUsrNameFilter" placeholder="Selling User Name" value="@ViewData["SellUserFilter"]"/>
                </div>
            </div>

            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="MinValue" name="MinValue" type="number" step="0.01" min=0.01 value="@ViewData["MinVal"]" class="form-control" placeholder="Min Item Value"/>
                </div>

                <div class="form-col mr-2">
                    <input id="MaxValue" name="MaxValue" type="number" step="0.01" min=0.01 value="@ViewData["MaxVal"]" class="form-control" placeholder="Max Item Value"/>
                </div>
            </div>

            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="MinAmount" name="MinAmount" type="number" min=0 value="@ViewData["MinAmount"]" class="form-control" placeholder="Min Item Count"/>
                </div>

                <div class="form-col mr-2">
                    <input id="MaxAmount" name="MaxAmount" type="number" min=0 value="@ViewData["MaxAmount"]" class="form-control" placeholder="Max Item Count"/>
                </div>
            </div>

            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input id="StartDate" name="StartDate" type="date" value="@ViewData["StartDate"]" class="form-control" placeholder="From Date"/>
                </div>

                <div class="form-col mr-2">
                    <input id="EndDate" name="EndDate" type="date" value="@ViewData["End Date"]" class="form-control" placeholder="To Date"/>
                </div>
            </div>


            <div class="form-row mb-2">
                <div class="form-col mx-2">
                    <input type="submit" value="Search" class="btn btn-outline-dark"/>
                </div>
                <div class="form-col mx-2">
                    <a asp-action="Operations" class="btn btn-outline-danger">Clear filters</a>
                </div>
            </div>
        </form>
    </div>
    
    <div class="col-4">
        <div class="row py-5 lead">Total Selected Value: @ViewData["TotalValue"]</div>
        <div class="row lead">Total Selected Amount: @ViewData["TotalAmount"]</div>
    </div>
</div>


<table id="table" class="text-center table table-striped">
    <thead class="thead-light">
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["IdSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            #
        </a>
    </th>
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["ItemNameSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            Item
        </a>
    </th>
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["ItemCatSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            Item Categories
        </a>
    </th>
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["ItemCountSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            Item Count
        </a>
    </th>
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["ItemValueSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            Value
        </a>
    </th>
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["BuyUserSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            Buying User
        </a>
    </th>
    <th scope="col">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["SellUserSortParam"]"
           asp-route-pageIndex="@(Model.PageIndex)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize">
            Selling User
        </a>
    </th>
    <th scope="col">
            <a asp-action="Operations"
               asp-route-sortOrder="@ViewData["DateSortParam"]"
               asp-route-pageIndex="@(Model.PageIndex)"
               asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
               asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
               asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
               asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
               asp-route-pageSize="@Model.PageSize">
                Date
            </a>
        </th>
        
    <th scope="col">Action</th>
    </thead>

    <tbody>
    @foreach (var operation in Model)
    {
        i++;
        <tr>
            <td>@i</td>
            <td>@operation.Item?.Name</td>
            <td>@String.Join(", ", operation.Item?.Categories.Select(i => i.Name).ToArray())</td>
            <td>@operation.ItemCount</td>
            <td>@operation.Value</td>
            <td>@(operation.BuyingUser?.Name + " (" + operation.BuyingUser?.UserType.ToString() + ")")</td>
            <td>@(operation.SellingUser?.Name + " (" + operation.SellingUser?.UserType.ToString() + ")")</td>
            <td>@operation.SellingDate.ToString("d", CultureInfo.CreateSpecificCulture("ru-RU"))</td>
            <td>
                <button type="button" class="fill-modal btn btn-outline-primary" data-toggle="modal" value="@operation.Id" data-target="#addingModal">
                    Edit
                </button>

                <a href="~/Operation/RemoveOperation/?id=@operation.Id" class="btn btn-outline-danger">
                    Remove
                </a>
            </td>
        </tr>
    }
    </tbody>
</table>

<div class="float-right">
    <button type="button" class="clear-modal btn btn-primary" data-toggle="modal" data-target="#addingModal">
        Add New Operation
    </button>

    <a asp-route-download="true"
       class="btn btn-outline-primary">
        Download As ExcelFile
    </a>
</div>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<div class="container">
    <div class="row">
        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["SortOrder"]"
           asp-route-pageIndex="@(Model.PageIndex - 1)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize"
           class="btn btn-outline-dark @prevDisabled">
            Previous
        </a>

        <div class="border border-dark rounded input text-justify px-2 mx-2">
            <span class="align-middle">Page Index: @Model.PageIndex</span>
        </div>

        <a asp-action="Operations"
           asp-route-sortOrder="@ViewData["SortOrder"]"
           asp-route-pageIndex="@(Model.PageIndex + 1)"
           asp-route-itemNameFilter="@(string.Join(",", (ViewData["ItemNameFilter"] as string[])))"
           asp-route-catFilter="@(string.Join(",", (ViewData["CatFilter"] as string[])))"
           asp-route-sellUsrNameFilter="@ViewData["SellUserFilter"]"
           asp-route-buyUsrNameFilter="@ViewData["BuyUserFilter"]"
           asp-route-pageSize="@Model.PageSize"
           class="btn btn-outline-dark @nextDisabled">
            Next
        </a>
    </div>
</div>


<div class="modal fade" id="addingModal" role="dialog" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered" role="document">
        <div class="modal-content">
            <form class="needs-validation" method="post" novalidate>
                <div class="modal-body">
                    <label for="operationItem" class="form-label">Item:</label>
                    <select id="operationItem" name="item" class="form-control">
                        @foreach (var item in ViewData["AllItems"] as IEnumerable<ItemViewModel>)
                        {
                            <option value="@item.Id">@item.Name</option>
                        }
                    </select>

                    <label for="ItemCount" class="col-form-label float-left">Item Count:</label>
                    <input id="ItemCount" name="ItemCount" type="number" min=1 value="1" class="form-control" placeholder="Item Count" required/>
                    <div class="float-left invalid-feedback">Please provide an item count.</div>

                    <label for="Value" class="col-form-label float-left">Item Value:</label>
                    <input id="Value" name="Value" type="number" step="0.01" min=0.01 value="0.01" class="form-control" placeholder="Item Count" required/>
                    <div class="float-left invalid-feedback">Please provide an item value.</div>

                    <label for="BuyingUser" class="form-label">Buiyng User:</label>
                    <select id="BuyingUser" name="buyingUser" class="form-control" required>
                        @foreach (var user in ViewData["AllUsers"] as IEnumerable<UserViewModel>)
                        {
                            <option value="@user.Id">@(user.Name + " (" + user.UserType + ")")</option>
                        }
                    </select>

                    <label for="SellingUser" class="form-label">Selling User:</label>
                    <select id="SellingUser" name="sellingUser" class="form-control" required>
                        @foreach (var user in ViewData["AllUsers"] as IEnumerable<UserViewModel>)
                        {
                            <option value="@user.Id">@(user.Name + " (" + user.UserType + ")")</option>
                        }
                    </select>
                    
                    <label for="SellingDate" class="form-label">Date:</label>
                    <input id="SellingDate" name="SellingDate" class="form-control" type="date" required>

                </div>

                <div class="modal-footer form-check">
                    <button type="submit" id="Id" class="btn btn-primary" name="Id">Edit Operation</button>
                    <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                </div>

            </form>
        </div>
    </div>
</div>


<script>
    $(document).ready(function () {
        $('#itemSelect').select2({
            multiple: true,
            theme: 'bootstrap4',
            placeholder: "Select Items"
        });

        $('#catSelect').select2({
            multiple: true,
            theme: 'bootstrap4',
            placeholder: "Select Categories"
        });
    });


    $('.fill-modal').click(function () {
        var $row = $(this).closest("tr");
        $('#Id').val(parseInt($(this).val()));
        $('#ItemCount').val($row.children("td:nth-child(4)").text().trim());
        $('#Value').val($row.children("td:nth-child(5)").text().trim());
        
        const dateArr = $row.children("td:nth-child(8)").text().split('.')
        $('#SellingDate').val(dateArr[2] + '-' + dateArr[1] + '-' + dateArr[0])

        $("#operationItem option:contains('" + $row.children('td:nth-child(2)').text().trim() + "')")
            .filter(function (i) {
                return $(this).text() === $row.children('td:nth-child(2)').text().trim();
            })
            .attr("selected", true)

        $("#BuyingUser option:contains('" + $row.children("td:nth-child(6)").text().trim() + "')")
            .filter(function (i) {
                return $(this).text() === $row.children("td:nth-child(6)").text().trim();
            })
            .attr("selected", true)

        $("#SellingUser option:contains('" + $row.children("td:nth-child(7)").text().trim() + "')")
            .filter(function (i) {
                return $(this).text() === $row.children("td:nth-child(7)").text().trim();
            })
            .attr("selected", true)
    });

    $('.clear-modal').click(function () {
        $('#operationItem').val(null);
        $('#Id').val(null);
        $('#ItemCount').val(1);
        $('#Value').val(0.01);
        $('#BuyingUser').val(null);
        $('#SellingUser').val(null);
        $('#SellingDate').val(null);
    });

    $("#search").keyup(function () {
        var searchText = $(this).val().toLowerCase();
        // Show only matching TR, hide rest of them
        $.each($("#table tbody tr"), function () {
            if ($(this).text().toLowerCase().indexOf(searchText) === -1)
                $(this).hide();
            else
                $(this).show();
        });
    });

    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function () {
        'use strict';
        window.addEventListener('load', function () {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function (form) {
                form.addEventListener('submit', function (event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>